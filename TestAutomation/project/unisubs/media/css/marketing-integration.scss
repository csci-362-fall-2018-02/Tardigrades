// Hacks to integrate the new header/footer
.container {
    position: relative;
}

header a:link, footer a:link {
    text-decoration: none;
}

#page-header .nav,  #page-footer .nav {
    margin: 0;
    padding: 0;
    float: none;
    width: auto;

    li {
        a {
            float: none;
            background-image: none;
        }
    }

    .dropdown {
        position: relative;

        .caret {
            float: none;
        }
    }

}
#page-header .nav li {
        float: none;
}

#page-footer {

    nav {
        display: block;

    }
    ul.nav:after {
        content: " ";
        display: table;
    }

    .navbar-nav a {
        padding: 15px;
        font-size: 14px;
    }

    section {
        padding: 50px 0;
    }
}

.img-responsive {
    display: block;
    max-width: 100%;
    height: auto;
}

#mobilenav {
        display: none;
}
#mainnav .primarynav ul li {
    padding: 0;
}

#page-header, #page-footer {
  .content {
    padding: 20px;
    position: relative;
    min-height: 0;
  }
}

// Take parts of grid.scss, but not enough to mess up the content layout
// Set the number of columns you want to use on your layout.
$grid-columns: 12 !default;
// Set the gutter between columns.
$gutter-width: 2rem !default;
// Set a margin for the container sides.
$outer-margin: 2rem !default;
// Create or remove breakpoints for your project
// Syntax:
// name SIZErem,
$breakpoints:
  xs 768px 750px,
  sm 768px 750px,
  md 992px 970px,
  lg 1430px 1400px !default;

$flexboxgrid-max-width: 1400px !default;

$gutter-compensation: $gutter-width * .5 * -1;
$half-gutter-width: $gutter-width * .5;

.container {
  margin-right: auto;
  margin-left: auto;
  // padding-left: 1rem;
  // padding-right: 1rem;
}

.row, .grid {
  box-sizing: border-box;
  display: flex;
  flex: 1 0 auto;
  flex-direction: row;
  flex-wrap: wrap;
  margin-right: $gutter-compensation;
  margin-left: $gutter-compensation;
  &.condensed {
    margin-right: 0;
    margin-left: 0;
    [class^='col-'] {
      padding-right: $half-gutter-width * 0.5;
      padding-left: $half-gutter-width * 0.5;
    }
  }
}


@mixin flexboxgrid-sass-col-common {
  box-sizing: border-box;

  // split @include flex(0, 0, auto) into individual props
  flex-grow: 0;
  flex-shrink: 0;

  // we leave @include flex-basis(auto) out of common because  
  // in some spots we need it and some we dont
  // more why here: https://github.com/kristoferjoseph/flexboxgrid/issues/126

  padding-right: $half-gutter-width;
  padding-left: $half-gutter-width;
  &.collapse-start { padding-left: 0; }
  &.collapse-end   { padding-right: 0; }
  &.collapse-gutters   { padding-right: 0; padding-left: 0; }
}

@each $breakpoint in $breakpoints {
  $name: nth($breakpoint, 1);
  $size: nth($breakpoint, 2);
  $container: nth($breakpoint, 3);
  @media only screen and (min-width: $size) {
    #page-footer, .newgrid {
      .container {
        width: $container;
      }

      .col-#{$name} {
        @include flexboxgrid-sass-col-common;
        flex-basis: auto;
      }
      @for $i from 1 through $grid-columns {
        .col-#{$name}-#{$i} {
          @include flexboxgrid-sass-col-common;
          flex-basis: 100% / $grid-columns * $i;
          max-width: 100% / $grid-columns * $i;
        }
      }
      @for $i from 1 through $grid-columns {
        .col-#{$name}-offset-#{$i} {
          @include flexboxgrid-sass-col-common;
          margin-left: 100% / $grid-columns * $i
        }
      }
      .col-#{$name} {
        flex-grow: 1;
        flex-basis: 0;
        max-width: 100%;
      }
      .start-#{$name} {
        justify-content: flex-start;
        text-align: start;
      }

      .center-#{$name} {
        justify-content: center;
        text-align: center;
      }

      .end-#{$name} {
        justify-content: flex-end;
        text-align: end;
      }

      .top-#{$name} {
        align-items: flex-start;
      }

      .middle-#{$name} {
        align-items: center;
      }

      .bottom-#{$name} {
        align-items: flex-end;
      }

      .around-#{$name} {
        justify-content: space-around;
      }

      .between-#{$name} {
        justify-content: space-between;
      }

      .first-#{$name} {
        order: -1;
      }

      .last-#{$name} {
        order: 1;
      }
    }
  }
}


#page-footer .languageSwitcher {
  margin-left: 15px;
  margin-top: 10px;
}

@font-face {
  font-family: 'amara';
  src:  url('../fonts/amara.eot');
  src:  url('../fonts/amara.eot#iefix') format('embedded-opentype'),
    url('../fonts/amara.woff2') format('woff2'),
    url('../fonts/amara.ttf') format('truetype'),
    url('../fonts/amara.woff') format('woff'),
    url('../fonts/amara.svg#amara') format('svg');
  font-weight: normal;
  font-style: normal;
}
// search icon
i.icon {
  font-family: 'amara' !important;
  font-style: normal;
  font-weight: normal;
  font-variant: normal;
  text-transform: none;
  line-height: 1;
  vertical-align: middle;
}
i.icon.icon-search:before {
  content: "\e905";
  /* use !important to prevent issues with browser extensions that change fonts */
  speak: none;

  /* Better Font Rendering =========== */
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}
.sr-only {
  position: absolute;
  width: 1px;
  height: 1px;
  padding: 0;
  margin: -1px;
  overflow: hidden;
  clip: rect(0,0,0,0);
  border: 0;
}

.visible-xs, .visible.sm {
  display: none;
}
.dropdown {
  position:relative
}
#topnav #user-menu .caret {
        float: none;
}
