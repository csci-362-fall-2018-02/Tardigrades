#!/bin/bash

AWS_ID=${AWS_ACCESS_ID:-}
AWS_KEY=${AWS_SECRET_KEY:-}
S3_PASSPHRASE=${S3_PASSPHRASE:-}
APP_NAME=amara
APP_ROOT=/opt/apps
APP_DIR=$APP_ROOT/$APP_NAME
REV=${REVISION:-staging}
SETTINGS_REV=${SETTINGS_REVISION:-$REV}
SMTP_HOST=${SMTP_HOST:-smtp.sendgrid.net}
SMTP_PORT=${SMTP_PORT:-587}
SASL_USER=${SASL_USER:-universalsubtitles}
SASL_PASSWD=${SASL_PASSWD:-}
CELERY_OPTS=${CELERY_OPTS:-}
MAILNAME=${MAILNAME:-pculture.org}
NEW_RELIC_APP_NAME=${NEW_RELIC_APP_NAME:-}
NEW_RELIC_LICENSE_KEY=${NEW_RELIC_LICENSE_KEY:-}
SKIP_CODE_PULL=${SKIP_CODE_PULL:-}
export PYTHONPATH=/var/run/amara:/opt/apps/amara:/opt/apps/amara/libs:/opt/apps/amara/apps

if [ $DJANGO_SETTINGS_MODULE = "unisubs_settings" ] ; then
    if [ ! -z "$AWS_ID" ] && [ ! -z "$AWS_SECRET_KEY" ] ; then
        # This is how we used to setup AWS auth.  On kubernetes, we use a instance profile instead
        export AWS_ACCESS_KEY_ID=$AWS_ID
        export AWS_SECRET_ACCESS_KEY=$AWS_SECRET_KEY
    fi
    aws s3 cp s3://amara/settings/${SETTINGS_REV}/server_local_settings.py server_local_settings.py
fi
