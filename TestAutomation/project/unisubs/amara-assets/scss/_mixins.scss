@mixin transition($duration: 0.3s, $property: all, $effect: ease-in-out) {
  transition: $property $duration $effect;
}

@mixin animation($effect: fadeIn,  $duration: 0.5s, $delay: 0s) {
  animation-name: $effect;
  animation-duration: $duration;
  animation-fill-mode: both;
  animation-delay: ($delay);
}

@mixin palette($bg: red, $color: yellow) {
  background-color: $bg !important;
  fill: $bg !important;
  color: $color !important;
  h1, h2, h3, h4, .lead {
    color: $color;
    small {
      color: $color;
    }
  }
  hr {
    border-color: lighten($color, 10%) !important;
  }
}

@mixin clamp($num: 2, $line-height: 1.2) {
  display: block;
  display: -webkit-box;
  position: relative;

  max-height: 1em * $line-height * $num;
  line-height: $line-height;
  overflow: hidden;
  text-overflow: ellipsis;
  padding: 0 !important;

  -webkit-line-clamp: $num;
  -webkit-box-orient: vertical;
  // &:after {
  //   display    : block;
  //   position   : absolute;
  //   height     : 1em * $line-height;
  //   content    : '...';
  //   text-align : right;
  //   bottom     : 0;
  //   right      : 0;
  //   // width      : 25%;
  //   background : linear-gradient(to right, rgba(255, 255, 255, 0), rgba(255, 255, 255, 0) 75%);
  // }
}

// Add responsive CSS
//
// Use this mixin to wrap CSS that gets applied to only certain devices.  This
// mixin will target screen devices with min-width = the min width associated with $min-size,
// and max-width = the max width associated with #max-size.  Use 0 to skip a
// min/max size.  Use 1 argument to set both min and max size together.
//
// Examples:
//   - respond-to(phone) -- target phones
//   - respond-to(tablet, laptop) -- target devices with sizes between tablets and small desktops (inclusive)
//   - respond-to(0, laptop) -- target devices with sizes tablets and below
//

@mixin respond-to($min-size, $max-size: null) {
  @if($max-size == null) {
    $max-size: $min-size;
  }

  @if(map-has-key($breakpoints, $min-size)) {
    $min-size: map-get($breakpoints, $min-size);
  }
  @if(map-has-key($breakpoints-max, $max-size)) {
    $max-size: map-get($breakpoints-max, $max-size);
  }
  $query: 'only screen';

  @if($min-size != 0) {
    $query: "#{$query} and (min-width: #{$min-size})";
  }
  @if($max-size != 0) {
    $query: "#{$query} and (max-width: #{$max-size})";
  }

  @media #{$query} {
    @content;
  }
}

@mixin no-underline() {
  text-decoration: none;

  &:hover, &:focus {
    text-decoration: none;
  }
}

@mixin shadow() {
  box-shadow: 1px 1px 2px 0 rgba(0, 0, 0, 0.5);
}
