.listView {
  display: grid;

  margin: 0 0 40px;
}

.listView > * {
  padding: 10px;
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;

  &.expanded {
    background: $snow;
    border-top: 1px solid light($gray);
    margin-top: -1px; // Avoid making the cell move downward when it expands
  }
  &.selected {
    padding-left: 4px;
    border-left: 6px solid $lime;
  }
  &.hover {
    background: $snow;
  }
}

.listView.expandable > * {
  cursor: pointer;
  &.expanded {
    cursor: auto;
  }
}

.listView-header {
  background: $snow;
}

.listView-secondary {
  color: $gray;
  display: none;
  margin-top: 4px;

  &.visible {
    display: block;
  }
}

.listView-secondaryRow {
  color: $gray;
  display: none;
  grid-column: 1 / -1;

  &.expanded {
    border-top: 0;
    border-bottom: 1px solid light($gray);
  }

  &.visible {
    display: block;
  }
}

.listView-checkbox {
  &.expanded {
    grid-row-end: span 2; // Make the checkbox cell take up 2 rows, to align the secondary row with the main content.
    border-bottom: 1px solid light($gray);
  }
}

.listView-actions {
  display: flex;
  align-items: start;
  overflow: visible;
}


.listView-action {
  visibility: hidden;
  position: relative;
  color: $gray;
  font-size: $font-size-normal;
  // Make actions easier to click on by:
  //    - Making sure they're square rather than thin
  //    - Extending their boundary into the padding of the row
  min-width: 40px;
  padding: 10px;
  margin: -10px -6px;
  border-radius: 50%;

  &:hover {
    color: $lime;
  }
  &:after {
    position: absolute;
    z-index: $z-index-behind;
    content: "";
    top: 50%;
    bottom: 50%;
    left: 50%;
    right: 50%;
    border-radius: 50%;

    @include transition(0.2s, all, linear);
  }
  &:hover:after {
    top: 0;
    bottom: 0;
    left: 0;
    right: 0;
    background: $snow;
  }

  &.hover, &.selected {
    visibility: visible;
  }
}

@mixin listView-grid-template-columns($columns, $collapsed) {
  $items: ();

  @each $column in $columns {
    $size: 1fr;
    @if index($collapsed, $column) {
      $size: auto;
    }

    $items: append($items, $size);
  }

  grid-template-columns: $items;
}

// Mixin to define a listview
//
// Args:
//   $spec: Mapping of breakpoint names to lists of CSS classes that should be
//     visible at that breakpoint and above, in left-to-right order.
//   $collapsed: List of CSS classes of columns that we don't give extra
//     space to.  By default this is listView-actions and listView-checkbox.
//
// Rules:
//   - Every child of the listView element should have a CSS class based on the
//     column their in (either a standard listView class like listView-checkbox,
//     or else something specific to your particular element like videoUrls-url).
//   - Each of those classes should be in exactly one of the above lists
//   - The listView-secondary class is a special case, since it has special
//     rules about when its visible.
//
//  Failure to follow the rules will result in a crazy layout
//
@mixin listView($spec, $collapsed: null) {
  // Little bit of defensive programming
  @each $breakpoint, $classes in $spec {
    @each $class in $classes {
      @if str-index($class, 'listview') {
        @error('Invalid class: ' + $class + ': make sure to use "listView" instead of "listview"');
      }
      @if str-slice($class, 1, 1) != "." {
        @error('Invalid class: ' + $class + ': make sure you start with a period');
      }
    }
  }
  @if $collapsed == null {
    $collapsed: ();
  }
  $collapsed: join($collapsed, ('.listView-actions', '.listView-checkbox'));
  
  // Use a mobile-first approach and define the styles for $phone outside of any media query.
  $phone: map-get($spec, phone);
  @if $phone == null {
    @error("phone breakpoint must be present in listview()");
  }
  $spec: map-remove($spec, phone);
  $column-count: length($phone);

  @include listView-grid-template-columns($phone, $collapsed);

  @if index($phone, ".listView-checkbox") {
    .listView-secondaryRow {
      grid-column-start: 2;
    }
  }

  // Hide CSS classes not visible at the phone width
  @each $breakpoint, $classes in $spec {
    @each $class in $classes {
      @if index($phone, $class) == null {
        > #{$class} {
          display: none;
        }
      }
    }
  }

  // For each breakpoint, update the layout and show the new columns
  @each $breakpoint, $columns in $spec {
    @include respond-to($breakpoint, 0) {
      @include listView-grid-template-columns($columns, $collapsed);
      @each $class in $columns {
        > #{$class} {
          display: block;
        }
      }
      @if index($columns, ".listView-checkbox") {
        .listView-secondaryRow {
          grid-column-start: 2;
        }
      }
      $column-count: max($column-count, length($columns));
    }
  }

  & {
    // Use column-count to give this info to the JS code.  It's ignore since we're using display: grid.
    column-count: $column-count;
  }
}

// Styles for individual list views

.listView {
  &.styleguideExample {
    @include listView((
      phone: (".styleguideExample-title", ".styleguideExample-language"),
      tablet: (".listView-checkbox", ".styleguideExample-title", ".styleguideExample-language", ".listView-actions"),
    ));
  }

  &.memberDirectory {
    @include listView((
      phone: (".memberDirectory-name", ".memberDirectory-role"),
      laptop: (".memberDirectory-name", ".memberDirectory-role", ".memberDirectory-experience"),
      desktop: (".memberDirectory-name", ".memberDirectory-role", ".memberDirectory-joined", ".memberDirectory-experience"),
    ));
  }

  &.memberDirectory-admin {
    @include listView((
      phone: (".memberDirectory-name", ".memberDirectory-role"),
      tablet: (".listView-checkbox", ".memberDirectory-name", ".memberDirectory-role", ".listView-actions"),
      laptop: (".listView-checkbox", ".memberDirectory-name", ".memberDirectory-role", ".memberDirectory-experience", ".listView-actions"),
      desktop: (".listView-checkbox", ".memberDirectory-name", ".memberDirectory-role", ".memberDirectory-joined", ".memberDirectory-experience", ".listView-actions"),
    ));
  }

  &.projectList {
    @include listView((
      phone: (".projectList-title", ".projectList-description"),
      tablet: (".projectList-title", ".projectList-description", ".listView-actions"),
    ));
  }

  &.integrationList {
    @include listView((
      phone: (".integrationList-channel"),
      tablet: (".integrationList-channel", ".listView-actions"),
    ));
  }

  &.syncHistoryList {
    @include listView((
      phone: (".syncHistoryList-title", ".listView-actions"),
      tablet: (".syncHistoryList-title", ".syncHistoryList-language", ".syncHistoryList-date", ".listView-actions"),
      desktop: (".syncHistoryList-title", ".syncHistoryList-channel", ".syncHistoryList-platform", ".syncHistoryList-language", ".syncHistoryList-date", ".listView-actions"),
    ));
  }

  &.videoUrls {
    @include listView((
      phone: (".videoUrls-url"),
      laptop: (".videoUrls-url", ".videoUrls-badges", ".listView-actions"),
    ));
  }

  &.assignmentHistory {
    @include listView((
      phone: ('.assignmentHistory-video', '.assignmentHistory-language'),
      tablet: ('.assignmentHistory-video', '.assignmentHistory-language', '.assignmentHistory-type'),
      laptop: ('.assignmentHistory-video', '.assignmentHistory-language', '.assignmentHistory-type', '.assignmentHistory-date'),
      desktop: ('.assignmentHistory-video', '.assignmentHistory-language', '.assignmentHistory-type', '.assignmentHistory-date', '.assignmentHistory-status'),
    ), $collapsed: ('.assignmentHistory-status'));
  }

  &.videoFeedsList {
    @include listView((
      phone: (".videoFeedsList-title"),
      tablet: (".videoFeedsList-title", ".listView-actions"),
    ));
  }
}
